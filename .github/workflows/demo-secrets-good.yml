name: Demo - Using Secrets (GOOD PRACTICE)

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Keep manual option too

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com

jobs:
  build-and-deploy-good:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (SECURE - GOOD!)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # ✅ GOOD - Credentials from GitHub Secrets (encrypted)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug ECR Info
        run: |
          echo "AWS_REGION: ${{ env.AWS_REGION }}"
          echo "ECR_REGISTRY: ${{ env.ECR_REGISTRY }}"
          echo "AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Login to ECR (SECURE - GOOD!)
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ env.AWS_REGION }}

      - name: Build and push frontend (SECURE - GOOD!)
        uses: docker/build-push-action@v6
        with:
          context: frontend
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/registration-frontend:latest
          build-args: |
            # ✅ GOOD - API URL from secrets (masked in logs)
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}

      - name: Build and push backend (SECURE - GOOD!)
        uses: docker/build-push-action@v6
        with:
          context: backend
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/registration-backend:latest

      - name: Copy compose file to EC2 (SECURE - GOOD!)
        uses: appleboy/scp-action@v0.1.7
        with:
          # ✅ GOOD - All sensitive data from secrets
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: docker-compose.ecr.yml
          target: ~/app

      - name: Deploy to EC2 (SECURE - GOOD!)
        uses: appleboy/ssh-action@v1.0.3
        with:
          # ✅ GOOD - All sensitive data from secrets
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: SECRET_KEY,AWS_ACCOUNT_ID,AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
          script: |
            set -e
            # ✅ GOOD - Create directory structure if it doesn't exist
            mkdir -p ~/app
            cd ~/app
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
              echo "Installing Docker Compose..."
              # Add Docker's official GPG key
              sudo apt update
              sudo apt install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update
              sudo apt install -y docker-compose-plugin
              sudo usermod -aG docker $USER

            fi
            
            # Install AWS CLI if not present
            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt install -y unzip
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws/
            fi
            
            # ✅ GOOD - Set environment variables explicitly
            export AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
            export AWS_REGION="${{ env.AWS_REGION }}"
            export SECRET_KEY="${{ secrets.BACKEND_SECRET_KEY }}"
            
            # Login to ECR using environment variables
            AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            AWS_DEFAULT_REGION="${{ env.AWS_REGION }}" \
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            # Deploy with environment variables
            sudo -E docker compose -f docker-compose.ecr.yml pull
            sudo -E docker compose -f docker-compose.ecr.yml up -d

      - name: Show what's good
        run: |
          echo "✅ BENEFITS OF THIS APPROACH:"
          echo "1. AWS credentials encrypted in GitHub Secrets"
          echo "2. API URLs configurable per environment"
          echo "3. JWT secrets masked in logs"
          echo "4. EC2 details from secrets"
          echo "5. SSH keys encrypted in secrets"
          echo "6. Easy to use different values for staging/prod"
          echo "7. Only authorized users can see/change secrets"
          echo "8. Secrets are automatically masked in logs"
          echo "9. Can rotate secrets without changing code"
          echo "10. Follows security best practices"
